{"version":3,"sources":["util/CookieHandler.js","util/api.js","components/NearestStop.jsx","components/StopSearch.jsx","pages/HomePage.jsx","components/HelperFunctions.jsx","components/BusResultRow.jsx","components/BusInfoModal.jsx","components/BusResults.jsx","pages/TrackingPage.jsx","components/BusNavbar.jsx","App.jsx","index.js"],"names":["cookies","Cookies","getRecentStops","undefined","get","appendRecentStop","object","arr","index","map","x","id","indexOf","splice","unshift","set","slice","CUMTD_API_URI","getStop","stopId","cb","retryWrapper","getNearestStops","latitude","longitude","url","promiseRetry","retry","number","console","error","axios","then","res","data","catch","NearestStop","props","getStops","a","coords","status","stops","code","setState","validRequest","state","prevProps","this","isOpen","toggle","positionError","showMore","Modal","className","ModalHeader","ModalBody","value","key","to","stop_id","onClick","name","stop_name","Math","round","distance","Button","color","ModalFooter","Component","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","suppressLocationOnMount","require","getSuggestions","inputValue","trim","toLowerCase","inputLength","length","words","split","filter","stop","containsWord","forEach","word","includes","getSuggestionValue","suggestion","renderSuggestion","StopSearch","getLocation","innerRef","getInnerRef","ref","toggleNearestStopModal","prevState","nearestStopModalOpen","onChange","event","newValue","onSuggestionSelected","e","shouldRedirect","selectionID","selectionName","onSuggestionsFetchRequested","suggestions","onSuggestionsClearRequested","onSuggestionHighlighted","highlightedSuggestion","style","inputProps","placeholder","push","highlightFirstSuggestion","icon","faMapMarkerAlt","HomePage","document","title","href","removeColors","str","test","navigator","userAgent","colors","newStr","i","join","BusResultRow","TransitionWrapper","posed","tr","enter","opacity","delay","elementOrder","transition","ease","duration","exit","computeHMS","expectedDate","date","Date","toString","hour","getHours","minute","getMinutes","seconds","getSeconds","getTRStyle","info","backgroundColor","route","route_color","route_text_color","isVisible","toggleModal","flipMove","headsign","expected_mins","expected","BusInfoModal","defaultState","nextStop","previousStop","imageExpanded","imgLoaded","lastUpdated","resetState","getNameOfStop","stopID","stop_points","obj","getNextPrevStops","busInfo","vehicleId","vehicle_id","vehicles","mapURL","nextStopID","next_stop_id","prevStopID","previous_stop_id","nextStopName","prevStopName","lastUpdatedDate","last_updated","Number","isNaN","getMapURL","stopInfo","location","long","lon","lat","stopLat","stop_lat","stopLong","stop_lon","toggleImageExpand","headerStyle","alt","src","visibility","onLoad","BusResults","componentDidMount","PullToRefresh","init","mainElement","triggerElement","shouldPullToRefresh","onRefresh","getData","handleRequestError","numRetries","errorHandler","resultCallback","departures","modalOpen","modalInfo","getModalStyle","shouldRefresh","errorMsg","Table","element","TrackingPage","finishedLoadingResults","stopResultsLoaded","shouldRefreshResults","secsSinceRefresh","errorManager","msg","handleCurrentStopError","getStopName","stopObj","stopNameLoaded","incrementCounter","refresh","shouldDisplayProgress","changeLoaderStatus","nProgress","start","done","intervalID","match","params","setInterval","clearInterval","resultStyle","display","displayReload","timeSinceRefreshText","formatDistance","addSuffix","includeSeconds","Alert","type","preventDefault","disabled","faSync","BusNavbar","defaultStops","closeNavbar","updateRecents","recentStops","Navbar","dark","expand","NavbarBrand","tag","Link","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","target","blur","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","ReactGA","initialize","pageview","window","pathname","search","Sentry","dsn","LogRocket","getSessionURL","sessionURL","scope","setExtra","addEventListener","log","App","exact","path","component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8e67bbf9.chunk.js","sourcesContent":["import { Cookies } from 'react-cookie';\n\nconst cookies = new Cookies();\n\nfunction getRecentStops() {\n  return cookies.get('stops') !== undefined ? cookies.get('stops') : [];\n}\n\nfunction appendRecentStop(object) {\n  const arr = getRecentStops();\n  const index = arr.map(x => x.id).indexOf(object.id);\n  if (index !== -1) {\n    arr.splice(index, 1); // remove duplicates in array\n  }\n  arr.unshift(object); // add at beginning\n  cookies.set('stops', arr.slice(0, 5)); // set only first 5 elements\n}\n\nfunction clearAllRecents() {\n  cookies.set('stops', []);\n}\n\nexport { appendRecentStop, getRecentStops, clearAllRecents };\n","import axios from 'axios';\nimport promiseRetry from 'promise-retry';\n\nconst CUMTD_API_URI =\n  process.env.NODE_ENV === 'production'\n    ? 'https://api.uiucbus.com/api'\n    : `http://localhost:${process.env.REACT_APP_API_PORT}/api`;\n\nconst MAPBOX_API_KEY =\n  'pk.eyJ1Ijoiam9zaC1ieXN0ZXIiLCJhIjoiY2psN2xyZGFoMDY5ZjNxbWtpeDE0dDlwNSJ9.AAJipEPA6e-kLi1Jv3Wpyg';\n\nfunction getBuses(stopId, cb) {\n  return retryWrapper(\n    `${CUMTD_API_URI}/getdeparturesbystop?stop_id=${stopId}`,\n    cb\n  );\n}\n\n// Get the stop name and additional info\nfunction getStop(stopId, cb) {\n  return retryWrapper(`${CUMTD_API_URI}/getstop?stop_id=${stopId}`, cb);\n}\n\nfunction getVehicleInfo(vehicleId) {\n  return retryWrapper(`${CUMTD_API_URI}/getvehicle?vehicle_id=${vehicleId}`);\n}\n\nfunction getNearestStops(latitude, longitude) {\n  return retryWrapper(\n    `${CUMTD_API_URI}/getstopsbylatlon?lat=${latitude}&lon=${longitude}`\n  );\n}\n\nfunction retryWrapper(url, cb) {\n  return promiseRetry(function(retry, number) {\n    if (number > 1) {\n      console.error('Retrying XHR with attempt number', number);\n      if (cb) {\n        cb(number);\n      }\n    }\n    return axios\n      .get(url)\n      .then(res => res.data)\n      .catch(retry);\n  });\n}\n\nexport {\n  getBuses,\n  getStop,\n  MAPBOX_API_KEY,\n  CUMTD_API_URI,\n  getVehicleInfo,\n  getNearestStops\n};\n","/* eslint-disable react/no-unused-state */\nimport React, { Component } from 'react';\nimport { geolocated } from 'react-geolocated';\nimport PropTypes from 'prop-types';\nimport { Modal, ModalHeader, ModalBody, Button, ModalFooter } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { getNearestStops } from '../util/api';\nimport '../styles/NearestStopModal.scss';\nimport { appendRecentStop } from '../util/CookieHandler';\n\nclass NearestStop extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      validRequest: false,\n      stops: []\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const { coords } = this.props;\n    if (coords && coords !== prevProps.coords) {\n      this.getStops();\n    }\n  }\n\n  getStops = async () => {\n    const {\n      coords: { latitude, longitude }\n    } = this.props;\n    const { status, stops } = await getNearestStops(latitude, longitude);\n\n    if (status.code === 200) {\n      this.setState({ validRequest: true, stops });\n    } else {\n      // TODO: Maybe do something with invalid requests\n      this.setState({ validRequest: false });\n    }\n  };\n\n  render() {\n    const { isOpen, toggle, positionError, coords } = this.props;\n    const { stops, showMore } = this.state;\n    return (\n      <div>\n        <Modal isOpen={isOpen} toggle={toggle} className=\"nearest-stop-modal\">\n          <ModalHeader>Nearest Stops</ModalHeader>\n          <ModalBody>\n            {positionError != null\n              ? 'Location services are not enabled.'\n              : stops.slice(0, showMore ? 10 : 5).map((value, key) => {\n                  // only get 5 items max\n                  return (\n                    <div key={key} className=\"link\">\n                      <Link\n                        to={`/track/${value.stop_id}`}\n                        onClick={() => {\n                          toggle();\n                          appendRecentStop({\n                            name: value.stop_name,\n                            id: value.stop_id\n                          });\n                        }}\n                      >\n                        {value.stop_name} (\n                        {Math.round((value.distance / 5280) * 100) / 100} mi.)\n                      </Link>\n                      <br />\n                    </div>\n                  );\n                })}\n            {coords && (\n              <Button\n                className=\"showMoreBtn\"\n                color=\"primary\"\n                onClick={() => this.setState({ showMore: !showMore })}\n              >\n                Show {showMore ? 'Less' : 'More'}\n              </Button>\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"secondary\" onClick={toggle}>\n              Exit\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nNearestStop.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  toggle: PropTypes.func.isRequired,\n  positionError: PropTypes.object,\n  coords: PropTypes.object\n};\n\nexport default geolocated({\n  positionOptions: {\n    enableHighAccuracy: false\n  },\n  userDecisionTimeout: 5000,\n  suppressLocationOnMount: true\n})(NearestStop);\n","import React, { Component } from 'react';\nimport Autosuggest from 'react-autosuggest';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { Button } from 'reactstrap';\nimport '../styles/StopSearch.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons';\nimport { appendRecentStop } from '../util/CookieHandler';\nimport NearestStop from './NearestStop';\n\nconst stops = require('../util/allstops.json');\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\nconst getSuggestions = value => {\n  const inputValue = value.trim().toLowerCase();\n  const inputLength = inputValue.length;\n  const words = inputValue.split(' ');\n\n  return inputLength === 0\n    ? []\n    : stops\n        .filter(stop => {\n          let containsWord = true;\n          // loop through every word in the input and see if it's included in the stop name\n          words.forEach(word => {\n            if (!stop.stop_name.toLowerCase().includes(word))\n              containsWord = false;\n          });\n\n          return containsWord;\n        })\n        .slice(0, 5);\n};\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => suggestion.stop_name;\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => <div>{suggestion.stop_name}</div>;\n\nclass StopSearch extends Component {\n  constructor() {\n    super();\n\n    // Autosuggest is a controlled component.\n    // This means that you need to provide an input value\n    // and an onChange handler that updates this value (see below).\n    // Suggestions also need to be provided to the Autosuggest,\n    // and they are initially empty because the Autosuggest is closed.\n    this.state = {\n      value: '',\n      suggestions: [],\n      selectionID: '',\n      selectionName: '',\n      nearestStopModalOpen: false\n    };\n  }\n\n  componentDidUpdate() {\n    const { shouldRedirect } = this.state;\n    if (shouldRedirect) {\n      this.setState({ shouldRedirect: false, value: '' });\n    }\n  }\n\n  getLocation = () => {\n    if (this.innerRef) {\n      this.innerRef.getLocation();\n    }\n  };\n\n  getInnerRef = ref => {\n    this.innerRef = ref;\n  };\n\n  toggleNearestStopModal = () => {\n    this.setState(prevState => ({\n      nearestStopModalOpen: !prevState.nearestStopModalOpen\n    }));\n  };\n\n  onChange = (event, { newValue }) => {\n    this.setState({\n      value: newValue\n    });\n  };\n\n  onSuggestionSelected = (e, { suggestion }) => {\n    this.setState({\n      shouldRedirect: true,\n      selectionID: suggestion.stop_id,\n      selectionName: suggestion.stop_name\n    });\n  };\n\n  // Autosuggest will call this function every time you need to update suggestions.\n  // You already implemented this logic above, so just use it.\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: getSuggestions(value)\n    });\n  };\n\n  // Autosuggest will call this function every time you need to clear suggestions.\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: []\n    });\n  };\n\n  onSuggestionHighlighted = ({ suggestion }) => {\n    this.setState({\n      highlightedSuggestion: suggestion\n    });\n  };\n\n  innerRef;\n\n  render() {\n    const {\n      value,\n      suggestions,\n      shouldRedirect,\n      selectionName,\n      selectionID,\n      nearestStopModalOpen,\n      highlightedSuggestion\n    } = this.state;\n    const { style } = this.props;\n    // Autosuggest will pass through all these props to the input.\n    const inputProps = {\n      placeholder: 'Type the name of a stop',\n      value,\n      onChange: this.onChange\n    };\n\n    if (shouldRedirect) {\n      appendRecentStop({\n        name: selectionName,\n        id: selectionID\n      });\n      return <Redirect push to={`/track/${selectionID}`} />;\n    }\n\n    // Finally, render it!\n    return (\n      <div className=\"search-wrapper\">\n        <Autosuggest\n          style={style}\n          onSuggestionSelected={this.onSuggestionSelected}\n          suggestions={suggestions}\n          onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n          onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n          onSuggestionHighlighted={this.onSuggestionHighlighted}\n          getSuggestionValue={getSuggestionValue}\n          renderSuggestion={renderSuggestion}\n          highlightFirstSuggestion={!highlightedSuggestion}\n          className=\"form-control\"\n          inputProps={inputProps}\n        />\n        <Button\n          className=\"location-btn\"\n          onClick={() => {\n            this.getLocation();\n            this.toggleNearestStopModal();\n          }}\n        >\n          <FontAwesomeIcon icon={faMapMarkerAlt} />\n        </Button>\n        <NearestStop\n          isOpen={nearestStopModalOpen}\n          toggle={this.toggleNearestStopModal}\n          ref={this.getInnerRef}\n        />\n      </div>\n    );\n  }\n}\n\nStopSearch.propTypes = {\n  style: PropTypes.object\n};\n\nexport default StopSearch;\n","import React, { Component } from 'react';\nimport '../styles/home.scss';\nimport StopSearch from '../components/StopSearch';\n\nclass HomePage extends Component {\n  componentDidMount() {\n    document.title = 'Home - Bus Tracker';\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"home d-flex\">\n          <div className=\"info-box\">\n            <h1>UIUC Bus Tracker</h1>\n            <StopSearch />\n          </div>\n        </div>\n        <footer className=\"text-muted\">\n          <div className=\"container\">\n            <p>\n              Copyright © 2019 UIUCBus.com\n              <br />\n              Data provided by{' '}\n              <a href=\"https://mtd.org/\">\n                Champaign—Urbana Mass Transit District\n              </a>\n              .\n              <br />\n              Suggestions, comments, or want to help contribute?{' '}\n              <a href=\"https://github.com/josh-byster/bus-tracker\">\n                Check it out on GitHub!\n              </a>\n            </p>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default HomePage;\n","function removeColors(str) {\n  if (\n    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n      navigator.userAgent\n    )\n  ) {\n    const colors = [\n      'Yellow',\n      'Red',\n      'Lavender',\n      'Blue',\n      'Green',\n      'Orange',\n      'Grey',\n      'Bronze',\n      'Brown',\n      'Gold',\n      'Ruby',\n      'Teal',\n      'Silver',\n      'Navy',\n      'Pink',\n      'Raven',\n      'Illini',\n      'YELLOW',\n      'RED',\n      'LAVENDER',\n      'BLUE',\n      'GREEN',\n      'ORANGE',\n      'GREY',\n      'BRONZE',\n      'BROWN',\n      'GOLD',\n      'RUBY',\n      'TEAL',\n      'SILVER',\n      'NAVY',\n      'PINK',\n      'RAVEN',\n      'ILLINI'\n    ];\n    let newStr = str;\n    for (let i = 0; i < colors.length; i++) {\n      newStr = newStr.split(colors[i]).join('');\n    }\n  }\n  return str;\n}\nexport default removeColors;\n","import React, { Component } from 'react';\nimport { Button } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport posed, { PoseGroup } from 'react-pose';\nimport removeColors from './HelperFunctions';\n\nclass BusResultRow extends Component {\n  TransitionWrapper = posed.tr({\n    enter: {\n      opacity: 1,\n      // eslint-disable-next-line react/destructuring-assignment\n      delay: (100 * (1 - 0.5 ** this.props.elementOrder)) / (1 - 0.5),\n      transition: {\n        opacity: { ease: 'easeIn', duration: 300 }\n      }\n    },\n    exit: {\n      opacity: 0,\n      transition: { duration: 0 }\n    }\n  });\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVisible: false\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ isVisible: true });\n  }\n\n  computeHMS = expectedDate => {\n    const date = new Date(expectedDate.toString());\n    let hour = date.getHours() % 12;\n    if (hour === 0) {\n      hour = 12;\n    }\n    let minute = date.getMinutes();\n    if (minute < 10) {\n      minute = `0${minute}`;\n    }\n    let seconds = date.getSeconds();\n    if (seconds < 10) {\n      seconds = `0${seconds}`;\n    }\n    return `${hour}:${minute}:${seconds}`;\n  };\n\n  getTRStyle = () => {\n    const { info } = this.props;\n    return {\n      backgroundColor: `#${info.route.route_color}`,\n      color: `#${info.route.route_text_color}`\n    };\n  };\n\n  render() {\n    const { isVisible } = this.state;\n    const { info, toggleModal } = this.props;\n    return (\n      <PoseGroup flipMove={false}>\n        {isVisible && (\n          <this.TransitionWrapper\n            key={info.headsign + info.expected_mins}\n            style={this.getTRStyle()}\n            className=\"resultRow\"\n          >\n            <td>\n              <b>{removeColors(info.headsign)}</b>\n            </td>\n            <td>\n              {info.expected_mins !== 0\n                ? `${info.expected_mins}m`\n                : 'Arriving Now'}\n            </td>\n            <td className=\"no-wrap\">{this.computeHMS(info.expected)}</td>\n            <td>\n              <Button color=\"success\" onClick={() => toggleModal(info)}>\n                Location\n              </Button>\n            </td>\n          </this.TransitionWrapper>\n        )}\n      </PoseGroup>\n    );\n  }\n}\n\nBusResultRow.propTypes = {\n  info: PropTypes.object.isRequired,\n  toggleModal: PropTypes.func.isRequired,\n  elementOrder: PropTypes.number.isRequired\n};\n\nexport default BusResultRow;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Modal, ModalHeader, ModalBody, Button, ModalFooter } from 'reactstrap';\nimport { MAPBOX_API_KEY, getVehicleInfo, getStop } from '../util/api';\nimport '../styles/InfoModal.scss';\n\nclass BusInfoModal extends Component {\n  defaultState = {\n    nextStop: '',\n    previousStop: '',\n    imageExpanded: false,\n    imgLoaded: false,\n    lastUpdated: 0\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = this.defaultState;\n  }\n\n  componentDidUpdate(prevProps) {\n    const { isOpen } = this.props;\n    if (prevProps.isOpen === false && isOpen === true) {\n      const mapURL = this.getMapURL();\n\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ mapURL, imgLoaded: false });\n      this.getNextPrevStops();\n    }\n  }\n\n  resetState = () => {\n    this.setState();\n  };\n\n  getNameOfStop = async stopID => {\n    if (stopID !== null) {\n      const nextStop = await getStop(stopID);\n      if (!nextStop.stops[0]) {\n        return 'Unknown';\n      }\n      return nextStop.stops[0].stop_points.filter(\n        obj => obj.stop_id === stopID\n      )[0].stop_name;\n    }\n    return 'Unknown';\n  };\n\n  getNextPrevStops = async () => {\n    const { busInfo } = this.props;\n    let vehicles;\n    try {\n      ({ vehicles } = await getVehicleInfo(busInfo.vehicle_id));\n    } catch (e) {\n      this.setState({\n        nextStop: 'Unknown',\n        previousStop: 'Unknown',\n        lastUpdated: 'N/A',\n        mapURL: ''\n      });\n      return;\n    }\n    const nextStopID = vehicles[0].next_stop_id;\n    const prevStopID = vehicles[0].previous_stop_id;\n    const nextStopName = await this.getNameOfStop(nextStopID);\n    const prevStopName = await this.getNameOfStop(prevStopID);\n\n    const lastUpdatedDate = vehicles[0].last_updated;\n    this.setState({\n      nextStop: nextStopName,\n      previousStop: prevStopName,\n      lastUpdated: !Number.isNaN(new Date() - new Date(lastUpdatedDate))\n        ? Math.round((new Date() - new Date(lastUpdatedDate)) / 1000)\n        : 'Unknown'\n    });\n  };\n\n  getMapURL = () => {\n    const { busInfo, stopInfo } = this.props;\n    if (busInfo.location !== undefined && stopInfo.stop_points !== undefined) {\n      const long = busInfo.location.lon;\n      const { lat } = busInfo.location;\n      const stopLat = stopInfo.stop_points[0].stop_lat;\n      const stopLong = stopInfo.stop_points[0].stop_lon;\n      return `https://api.mapbox.com/styles/v1/mapbox/streets-v10/static/pin-s-bus+3498db(${long},${lat}),pin-s-information+e74c3c(${stopLong},${stopLat})/auto/400x400@2x?access_token=${MAPBOX_API_KEY}`;\n    }\n    return null;\n  };\n\n  toggleImageExpand = () =>\n    this.setState(prevState => {\n      return {\n        imageExpanded: !prevState.imageExpanded\n      };\n    });\n\n  render() {\n    const { props, state } = this;\n    // silencing the linter warnings\n    const { isOpen, toggle } = this.props;\n    return (\n      <div>\n        <Modal\n          isOpen={isOpen}\n          toggle={() => {\n            this.setState(this.defaultState);\n            toggle();\n          }}\n          className=\"info-modal\"\n        >\n          <ModalHeader toggle={this.toggle} style={this.props.headerStyle}>\n            {props.busInfo.headsign}\n          </ModalHeader>\n          <ModalBody>\n            <img\n              className={\n                state.imageExpanded\n                  ? 'img-fluid map-image full'\n                  : 'img-fluid map-image'\n              }\n              alt=\"bus information\"\n              src={state.mapURL}\n              style={state.imgLoaded ? {} : { visibility: 'hidden' }} // Toggle visibility based on the image loaded\n              onLoad={() => this.setState({ imgLoaded: true })}\n            />\n            <p className=\"expand-text\" onClick={this.toggleImageExpand}>\n              {state.imageExpanded ? 'Make Smaller' : 'Expand'}{' '}\n            </p>\n            <p\n              className=\"stop-info\"\n              style={\n                state.imgLoaded || state.mapURL === ''\n                  ? {}\n                  : { visibility: 'hidden' }\n              }\n            >\n              <b>Next Stop: </b>\n              {state.nextStop}\n              <br />\n              <b>Previous Stop: </b>\n              {state.previousStop}\n              <br />\n              <br />\n              {state.lastUpdated !== 'Unknown' && (\n                <i>Position last updated {state.lastUpdated} seconds ago</i>\n              )}\n            </p>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              color=\"secondary\"\n              onClick={() => {\n                this.setState({});\n                toggle();\n              }}\n            >\n              Exit\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nBusInfoModal.propTypes = {\n  toggle: PropTypes.func.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  busInfo: PropTypes.object.isRequired,\n  stopInfo: PropTypes.object.isRequired,\n  headerStyle: PropTypes.object\n};\n\nexport default BusInfoModal;\n\n// <center><img class='img-fluid' style='border-radius:20px;' src=\"https://api.mapbox.com/styles/v1/mapbox/streets-v10/static/pin-s-bus+3498db(${long},${lat}),pin-s-information+e74c3c(${stop_long},${stop_lat})/auto/500x500@2x?access_token=${mapbox_api}\"></img>\n","import React, { Component } from 'react';\nimport { Table } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport PullToRefresh from 'pulltorefreshjs';\nimport { getBuses } from '../util/api';\nimport BusResultRow from './BusResultRow';\nimport BusInfoModal from './BusInfoModal';\n\nclass BusResults extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      departures: [],\n      validRequest: null,\n      modalInfo: {},\n      modalOpen: false\n    };\n  }\n\n  componentDidMount = () => {\n    PullToRefresh.init({\n      mainElement: 'body',\n      triggerElement: '.data',\n      shouldPullToRefresh: () => {\n        return this.props.stopInfo.stop_id !== undefined;\n      },\n      onRefresh: this.getData\n    });\n  };\n\n  componentDidUpdate(prevProps) {\n    const { stopInfo, shouldRefresh } = this.props;\n    if (\n      prevProps.stopInfo.stop_id !== stopInfo.stop_id ||\n      (!prevProps.shouldRefresh && shouldRefresh)\n    ) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({\n        departures: [],\n        validRequest: null,\n        modalInfo: {},\n        modalOpen: false\n      });\n      this.getData();\n    }\n  }\n\n  handleRequestError = numRetries => {\n    this.props.errorHandler(\n      `Looks like at this moment, the MTD servers are under heavy load and are unresponsive. We'll keep retrying in the meantime. (Number of tries: ${numRetries})`\n    );\n  };\n\n  getData = async () => {\n    const { stopInfo, resultCallback } = this.props;\n    const { status, departures } = await getBuses(\n      stopInfo.stop_id,\n      this.handleRequestError\n    );\n    if (status.code === 200) {\n      this.setState({ validRequest: true });\n      this.setState({ departures });\n    } else {\n      this.setState({ validRequest: false });\n    }\n    resultCallback();\n  };\n\n  toggleModal = info => {\n    this.setState(state => {\n      if (info !== undefined) {\n        return { modalOpen: !state.modalOpen, modalInfo: info };\n      }\n      // Only toggle, don't update info if there is no new info\n      return { modalOpen: !state.modalOpen };\n    });\n  };\n\n  getModalStyle = info => {\n    if (info.route) {\n      return {\n        backgroundColor: `#${info.route.route_color}`,\n        color: `#${info.route.route_text_color}`\n      };\n    }\n    return {};\n  };\n\n  render() {\n    const {\n      validRequest,\n      departures,\n      modalInfo,\n      modalOpen,\n      errorMsg\n    } = this.state;\n    const { style, stopInfo } = this.props;\n    if (validRequest === null) {\n      // On first time don't swap out elements unnecessarily. Just render div.\n      return <div />;\n    }\n    if (validRequest === false) {\n      return <h4>This page cannot be loaded.</h4>;\n    }\n\n    if (validRequest === true && departures.length === 0) {\n      return <h4 className=\"no-bus\">No buses coming in the next hour.</h4>;\n    }\n\n    if (errorMsg) {\n      return <h4 className=\"error\">Hi</h4>;\n    }\n    return (\n      <div style={style}>\n        <BusInfoModal\n          busInfo={modalInfo}\n          isOpen={modalOpen}\n          toggle={this.toggleModal}\n          stopInfo={stopInfo}\n          headerStyle={this.getModalStyle(modalInfo)}\n        />\n        <Table>\n          <thead>\n            <tr>\n              <th id=\"bus-name\">Bus Name</th>\n              <th id=\"mins-left\">Mins Left</th>\n              <th id=\"eta\">ETA</th>\n              <th id=\"last-location\">Last Location</th>\n            </tr>\n          </thead>\n          <tbody>\n            {departures.map((element, key) => {\n              return (\n                <BusResultRow\n                  info={element}\n                  toggleModal={this.toggleModal}\n                  key={key}\n                  elementOrder={key}\n                />\n              );\n            })}\n          </tbody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nBusResults.propTypes = {\n  stopInfo: PropTypes.object.isRequired,\n  resultCallback: PropTypes.func.isRequired,\n  style: PropTypes.object.isRequired,\n  shouldRefresh: PropTypes.bool.isRequired,\n  errorHandler: PropTypes.func.isRequired\n};\nexport default BusResults;\n","import React, { Component } from 'react';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport nProgress from 'nprogress';\nimport 'nprogress/nprogress.css';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { formatDistance } from 'date-fns';\nimport { Alert } from 'reactstrap';\nimport { faSync } from '@fortawesome/free-solid-svg-icons';\nimport BusResults from '../components/BusResults';\nimport '../styles/tracking.scss';\nimport { getStop } from '../util/api';\nimport StopSearch from '../components/StopSearch';\n\nconst SECS_UNTIL_REFRESH_WARN = 10;\n\nclass TrackingPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stopInfo: {},\n      stopNameLoaded: null,\n      stopResultsLoaded: null,\n      secsSinceRefresh: 0,\n      shouldRefreshResults: false,\n      intervalID: -1,\n      error: ''\n    };\n    const { match } = this.props;\n    this.getStopName(match.params.id);\n    this.state.intervalID = setInterval(this.incrementCounter, 1000);\n  }\n\n  componentDidUpdate(prevProps) {\n    const { match } = this.props;\n    if (prevProps.match.params.id !== match.params.id) {\n      this.setState({ stopNameLoaded: null, stopResultsLoaded: null });\n      this.getStopName(match.params.id);\n    }\n  }\n\n  componentWillUnmount() {\n    const { intervalID } = this.state;\n    if (intervalID !== -1) {\n      clearInterval(intervalID);\n    }\n  }\n\n  finishedLoadingResults = () => {\n    this.setState({\n      error: '',\n      stopResultsLoaded: true,\n      shouldRefreshResults: false,\n      secsSinceRefresh: 0\n    });\n  };\n\n  errorManager = msg => {\n    this.setState({ error: msg });\n  };\n\n  handleCurrentStopError = numRetries => {\n    this.errorManager(\n      `Looks like at this moment, the MTD servers are under heavy load and are unresponsive. We'll keep retrying in the meantime. (Number of tries: ${numRetries})`\n    );\n  };\n\n  getStopName = async stopId => {\n    const { status, stops } = await getStop(\n      stopId,\n      this.handleCurrentStopError\n    );\n    if (status.code === 200 && stops.length > 0) {\n      const stopObj = stops[0];\n      this.setState({ stopInfo: stopObj, stopNameLoaded: true });\n      document.title = `${stopObj.stop_name} - Bus Tracker`;\n    } else {\n      this.setState({ stopInfo: {}, stopNameLoaded: false });\n    }\n  };\n\n  incrementCounter = () => {\n    this.setState(prevState => ({\n      secsSinceRefresh: prevState.secsSinceRefresh + 1\n    }));\n  };\n\n  refresh = () => {\n    this.setState({ shouldRefreshResults: true, stopResultsLoaded: false });\n  };\n\n  shouldDisplayProgress = () => {\n    const { stopNameLoaded, stopResultsLoaded } = this.state;\n    return !stopResultsLoaded && stopNameLoaded !== false; // if the stop name invalid, display the \"stop invalid\"\n  };\n\n  changeLoaderStatus = () => {\n    if (this.shouldDisplayProgress()) {\n      if (\n        this.state.stopNameLoaded === true &&\n        !this.state.stopResultsLoaded &&\n        nProgress.status < 0.5\n      ) {\n        nProgress.set(0.5);\n      }\n      nProgress.start();\n    } else {\n      nProgress.done();\n    }\n  };\n  render() {\n    const {\n      stopNameLoaded,\n      stopResultsLoaded,\n      stopInfo,\n      secsSinceRefresh,\n      shouldRefreshResults,\n      error\n    } = this.state;\n    const resultStyle = this.shouldDisplayProgress() ? { display: 'none' } : {};\n    this.changeLoaderStatus();\n    const displayReload = secsSinceRefresh > SECS_UNTIL_REFRESH_WARN;\n    const timeSinceRefreshText = formatDistance(0, secsSinceRefresh * 1000, {\n      addSuffix: false,\n      includeSeconds: true\n    });\n\n    return (\n      <div className=\"tracking-page\">\n        <div className=\"info\">\n          <div className=\"errors container\">\n            {error && <Alert color=\"danger\">{error}</Alert>}\n          </div>\n          <div className=\"data\" style={resultStyle}>\n            <h1 className=\"stop_name\">{stopInfo.stop_name}</h1>\n\n            <StopSearch />\n            <div\n              className={`refresh-text ${displayReload ? 'fadeIn' : 'fadeOut'}`}\n            >\n              <h5>\n                Last refresh happened {timeSinceRefreshText} ago. Reload?\n                <br />\n                <button\n                  type=\"button\"\n                  className=\"refresh-btn\"\n                  onClick={e => {\n                    e.preventDefault();\n                    this.refresh();\n                  }}\n                  disabled={!displayReload}\n                >\n                  {' '}\n                  <FontAwesomeIcon icon={faSync} />\n                </button>\n              </h5>\n            </div>\n          </div>\n          <div style={resultStyle}>\n            {stopNameLoaded === false ? (\n              <h4 className=\"no-bus\">Stop does not exist</h4>\n            ) : (\n              <BusResults\n                style={resultStyle}\n                resultCallback={this.finishedLoadingResults}\n                stopInfo={stopInfo}\n                shouldRefresh={shouldRefreshResults}\n                errorHandler={this.errorManager}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nTrackingPage.propTypes = {\n  match: PropTypes.object.isRequired\n};\n\nexport default TrackingPage;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem\n} from 'reactstrap';\nimport {\n  appendRecentStop,\n  getRecentStops,\n  clearAllRecents\n} from '../util/CookieHandler';\n\nclass BusNavbar extends Component {\n  defaultStops = [\n    {\n      name: 'Transit Plaza',\n      id: 'PLAZA'\n    },\n    {\n      name: 'Illini Union',\n      id: 'IU'\n    },\n    {\n      name: 'PAR',\n      id: 'PAR'\n    },\n    {\n      name: 'Krannert Center',\n      id: 'KRANNERT'\n    },\n    {\n      name: 'First & Stadium',\n      id: '1STSTDM'\n    }\n  ];\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isOpen: false,\n      recentStops: []\n    };\n  }\n\n  toggle = () => {\n    const { isOpen } = this.state;\n    this.setState({\n      isOpen: !isOpen\n    });\n  };\n\n  closeNavbar = () => {\n    const { isOpen } = this.state;\n    if (isOpen) {\n      this.setState({\n        isOpen: false\n      });\n    }\n  };\n\n  updateRecents = () => {\n    this.setState({ recentStops: getRecentStops() });\n  };\n\n  render() {\n    const { isOpen, recentStops } = this.state;\n    return (\n      <div>\n        <Navbar color=\"dark\" dark expand=\"md\">\n          <NavbarBrand tag={Link} to=\"/\">\n            UIUC Bus Tracker\n          </NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              {this.defaultStops.map((value, key) => {\n                return (\n                  <NavItem key={key}>\n                    <NavLink\n                      tag={Link}\n                      to={`/track/${value.id}`}\n                      onClick={e => {\n                        appendRecentStop({ name: value.name, id: value.id });\n                        this.closeNavbar();\n                        e.target.blur();\n                      }}\n                    >\n                      {value.name}\n                    </NavLink>\n                  </NavItem>\n                );\n              })}\n\n              <UncontrolledDropdown nav inNavbar>\n                <DropdownToggle nav caret onClick={this.updateRecents}>\n                  Recents\n                </DropdownToggle>\n                <DropdownMenu right>\n                  {recentStops.map((value, key) => {\n                    return (\n                      <DropdownItem key={key}>\n                        <NavLink\n                          tag={Link}\n                          to={`/track/${value.id}`}\n                          onClick={e => {\n                            e.target.blur();\n                            this.closeNavbar();\n                          }}\n                          style={{ color: '#000000' }}\n                        >\n                          {value.name}\n                        </NavLink>\n                      </DropdownItem>\n                    );\n                  })}\n                  <DropdownItem divider />\n                  <DropdownItem>\n                    <NavLink\n                      onClick={() => clearAllRecents()}\n                      style={{ color: '#000000' }}\n                    >\n                      Clear All\n                    </NavLink>\n                  </DropdownItem>\n                </DropdownMenu>\n              </UncontrolledDropdown>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </div>\n    );\n  }\n}\n\nexport default BusNavbar;\n","import React from 'react';\nimport * as Sentry from '@sentry/browser';\nimport './App.css';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport ReactGA from 'react-ga';\nimport HomePage from './pages/HomePage';\nimport TrackingPage from './pages/TrackingPage';\nimport BusNavbar from './components/BusNavbar';\nimport LogRocket from 'logrocket';\nif (process.env.NODE_ENV === 'production') {\n  ReactGA.initialize('UA-109186351-1');\n  ReactGA.pageview(window.location.pathname + window.location.search);\n\n  Sentry.init({\n    dsn: 'https://a3cd776e555b4f62b9215dee5e11a886@sentry.io/306037'\n  });\n\n  LogRocket.init('oh67gs/uiucbus');\n\n  LogRocket.getSessionURL(sessionURL => {\n    Sentry.configureScope(scope => {\n      scope.setExtra('sessionURL', sessionURL);\n    });\n  });\n  window.addEventListener('offline', function(e) {\n    console.log('Not connected to LAN');\n  });\n\n  window.addEventListener('online', function(e) {\n    console.log('Connected back on LAN');\n  });\n}\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <BusNavbar />\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route path=\"/track/:id\" component={TrackingPage} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}